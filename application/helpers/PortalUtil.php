<?php

/**
 * Funções utilitárias portal
 */
class Zend_Controller_Action_Helper_PortalUtil extends Zend_Controller_Action_Helper_Abstract {

	/**
	 * @var Zend_Controller_Action_Helper_Util
	 */
	var $_util;
	
	/**
	 * Getter da propriedade Util
	 * @return Zend_Controller_Action_Helper_Util
	 */
	public function getUtil(){
		if(!isset($this->_util)){
			$this->_util = $this->getActionController()->getHelper('Util');
		}
		return $this->_util;
	}

	/**
	 *
	 * Obtem a primeira notícia na posição indicada do módulo indicado
	 *
	 * @param $posiciao string
	 * @param $modulo Default_Model_Modulo
	 * @return Default_Model_Noticia
	 */
	public function getFirstNoticia($posiciao, $modulo){

		// obtendo a posição
		$noticiaPos = new Default_Model_NoticiaPos();
		$noticiaPos->setModulo($modulo);
		$noticiaPos->setNome($posiciao);
		$noticiaPos = $noticiaPos->findFirstByExample();

		// obtendo notícia
		$noticia = new Default_Model_Noticia();
		$noticia->setNoticiaPos($noticiaPos);

		return $noticia->findFirstByExample('id desc');
	}

	/**
	 * Obtem a lista de banners na posição indicada do módulo indicado
	 *
	 * @param $posiciao string
	 * @param $modulo Default_Model_Modulo
	 * @param $order Ordenação dos objetos, nome da coluna no banco
	 * @param $count Número máximo de registros
	 * @param $offset Começa busca a partir do registro de número especificado
	 * @return Default_Model_Banner
	 */
	public function getListBanner($posiciao, $modulo, $order=null, $count=null, $offset=null){
		// obtendo a posição
		$bannerPos = new Default_Model_BannerPos();
		$bannerPos->setModulo($modulo);
		$bannerPos->setNome($posiciao);
		$bannerPos = $bannerPos->findFirstByExample('id desc');

		$banner = new Default_Model_Banner();
		$banner->setBannerPos($bannerPos);

		return $banner->fetchListByExample($banner, $order, $count, $offset);
	}

	/**
	 *
	 * Obtem o primeiro banner na posição indicada do módulo indicado
	 *
	 * @param $posiciao string
	 * @param $modulo Default_Model_Modulo
	 * @return Default_Model_Banner
	 */
	public function getFirstBanner($posiciao, $modulo){
		$aux = $this->getListBanner($posiciao, $modulo);
		if($aux == null)
		return null;
		return $aux[0];
	}

	public function createNoticiaPos(Default_Model_Modulo $modulo, $noticiaPos){
		if($modulo->getModuloClassificacao()->getDescricao() === 'secretaria'){
			$noticiaPos = new Default_Model_NoticiaPos(array('modulo' => $modulo, 'nome' => $noticiaPos));
			if($noticiaPos->findFirstByExample() == null){
				$noticiaPos->insert();
			}
		}
	}

	public function luceneSearch(){

		$doc = new Zend_Search_Lucene_Document();

		// Field is not tokenized, but is indexed and stored within the index.
		// Stored fields can be retrived from the index.
		$doc->addField(Zend_Search_Lucene_Field::Keyword('doctype',
                                                 'autogenerated'));

		// Field is not tokenized nor indexed, but is stored in the index.
		$doc->addField(Zend_Search_Lucene_Field::UnIndexed('created',
		time()));

		// Binary String valued Field that is not tokenized nor indexed,
		// but is stored in the index.
		$doc->addField(Zend_Search_Lucene_Field::Binary('icon',
		$iconData));

		// Field is tokenized and indexed, and is stored in the index.
		$doc->addField(Zend_Search_Lucene_Field::Text('annotation',
                                              'Document annotation text'));

		// Field is tokenized and indexed, but that is not stored in the index.
		$doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                  'My document content'));
	}
	
	public function incrementaOnline($session, $url=null){
		if($url == null){
			$url = 'geral';
		}
		if(!isset($session->$url)){
			$session->$url = 'computado';
			$online = new Default_Model_Online();
			$online->setHora($this->getUtil()->formataHoraYYYYMMAADDHHMM());
			$online->setUrl($url);
			$online->insert();
		}
	}
	
	public function getOnline($time, $url){
		if($url == null){
			$url = 'geral';
		}
		
		$online = new Default_Model_Online();
		return count($online->fetchList(array('hora > ?' => ($this->getUtil()->formataHoraYYYYMMAADDHHMM() - $time))));
	}
	
	public function getOnlineBetween($or, $dest, $url){
		if($url == null){
			$url = 'geral';
		}
		
		$online = new Default_Model_Online();
		return count($online->fetchList(array('hora > ?' => $or,
											  'hora < ?' => $dest)));
	}
	
public function getPrevisaoApucarana(){
		
		$ddmm = $this->getUtil()->formataDataDDMM();
		
		$previsao = new Default_Model_PrevisaoCptec();
		$previsao->setDdmm($this->getUtil()->formataDataDDMM());
		$previsao = $previsao->findFirstByExample();
		
		if(!$previsao){
		
			$channel = new Zend_Feed_Rss('http://servicos.cptec.inpe.br/RSS/cidade/530/previsao.xml');
			$item = $channel->current();
			
			// Get IMG
			$array = split('img src="',$item->description());
			$array = split('"/><br>',$array[1]);
			$array = split('/',$array[0]);
			$img = str_ireplace('.gif', '', $array[count($array) - 1]);
			
			$possTempo = array(	'c' => 'c',
							'ch' => 'c',
							'ci' => 'c',
							'cl' => 's',
							'cm' => 'sc',
							'cn' => 'sc',
							'ct' => 'sc',
							'cv' => 'sc',
							'de' => 'c',
							'e' => 'n',
							'ec' => 'n',
							'g' => 'c',
							'ge' => 'c',
							'in' => 'sc',
							'mn' => 'n',
							'n' => 'n',
							'nb' => 'n',
							'nb_old' => 'n',
							'nch' => 'c',
							'nci' => 'c',
							'ncl' => 's',
							'ncm' => 'sc',
							'ncn' => 'n',
							'nct' => 'n',
							'nd' => 'n',
							'ndi' => 'n',
							'ne' => 'c',
							'nnb' => 'n',
							'nnb_old' => 'n',
							'nnv' => 'n',
							'np' => 'c',
							'npc' => 'c',
							'npm' => 'c',
							'npn' => 'c',
							'npp' => 'n',
							'npt' => 'c',
							'nv' => 'n',
							'pc' => 'c',
							'pcm' => 'sc',
							'pcn' => 'sc',
							'pct' => 'sc',
							'pm' => 'sc',
							'pn' => 'n',
							'pnt' => 'c',
							'pp' => 'c',
							'ppm' => 'c',
							'ppn' => 'c',
							'ppt' => 'c',
							'ps' => 's',
							'psc' => 'n',
							'pt' => 'c',
							't' => 'c',
							'trsp' => 'n',
							'vn' => 'n');
			
			$img = $possTempo[$img];
			
			// GET MIN
			$array = split('Min: ',$item->description());
			$array = split('ÂºC Máx: ',$array[1]);
			$min = $array[0];
	
			// GET MAX
			$array = split('ÂºC ',$array[1]);
			$max = $array[0];
			
			$previsao = new Default_Model_PrevisaoCptec();
			$previsao->setDdmm($ddmm)
					 ->setTempMax($max)
					 ->setTempMin($min)
					 ->setImg($img);
					 
			$previsao->insert();
		}
		
		return array('img' => $previsao->getImg(), 'min' => $previsao->getTempMin(), 'max' => $previsao->getTempMax());
	}
}